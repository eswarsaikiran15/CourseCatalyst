# C Programming - Complete Study Guide

## Table of Contents
1. Introduction to C
2. Basic Syntax and Structure
3. Data Types and Variables
4. Operators
5. Control Flow Statements
6. Functions
7. Arrays
8. Pointers
9. Strings
10. Structures and Unions
11. File I/O
12. Dynamic Memory Allocation
13. Preprocessor Directives
14. Advanced Topics

## 1. Introduction to C

C is a general-purpose, procedural programming language developed by Dennis Ritchie at Bell Labs in 1972. It's the foundation for many modern programming languages and operating systems.

### Why Learn C?
- **Foundation Language**: Understanding C helps learn other languages
- **System Programming**: Used for operating systems, embedded systems
- **Performance**: Fast execution and memory efficiency
- **Portability**: Code can run on different platforms
- **Industry Standard**: Widely used in various domains

### Development Environment Setup:
```bash
# On Windows (with MinGW)
gcc --version

# On Linux/macOS
sudo apt-get install gcc  # Ubuntu/Debian
brew install gcc          # macOS with Homebrew

# Compiling a C program
gcc program.c -o program
./program
```

## 2. Basic Syntax and Structure

### Hello World Program:
```c
#include <stdio.h>

int main() {
    printf("Hello, World!\n");
    return 0;
}
```

### Program Structure:
```c
// Preprocessor directives
#include <stdio.h>
#include <stdlib.h>

// Global variables (optional)
int global_var = 10;

// Function declarations (prototypes)
int add(int a, int b);
void display(void);

// Main function
int main() {
    // Local variables
    int local_var = 5;
    
    // Function calls
    int result = add(10, 20);
    display();
    
    return 0;  // Success
}

// Function definitions
int add(int a, int b) {
    return a + b;
}

void display(void) {
    printf("This is a function\n");
}
```

### Comments:
```c
// Single-line comment

/*
Multi-line comment
Can span multiple lines
*/

/* Another way to comment out code */
```

## 3. Data Types and Variables

### Basic Data Types:
```c
#include <stdio.h>

int main() {
    // Integer types
    char ch = 'A';              // 1 byte (-128 to 127)
    unsigned char uch = 255;    // 1 byte (0 to 255)
    short s = 32767;            // 2 bytes
    int i = 2147483647;         // 4 bytes
    long l = 2147483647L;       // 4 or 8 bytes
    long long ll = 9223372036854775807LL; // 8 bytes
    
    // Floating-point types
    float f = 3.14f;            // 4 bytes (6-7 decimal digits)
    double d = 3.14159265359;   // 8 bytes (15-17 decimal digits)
    long double ld = 3.14159265359L; // 12 or 16 bytes
    
    // Boolean (C99 and later)
    #include <stdbool.h>
    bool flag = true;
    
    // Size of data types
    printf("Size of char: %zu bytes\n", sizeof(char));
    printf("Size of int: %zu bytes\n", sizeof(int));
    printf("Size of float: %zu bytes\n", sizeof(float));
    printf("Size of double: %zu bytes\n", sizeof(double));
    
    return 0;
}
```

### Variable Declaration and Initialization:
```c
int main() {
    // Declaration
    int age;
    float salary;
    char grade;
    
    // Initialization
    age = 25;
    salary = 50000.0f;
    grade = 'A';
    
    // Declaration with initialization
    int count = 0;
    float pi = 3.14159f;
    char letter = 'X';
    
    // Multiple declarations
    int x, y, z;
    int a = 1, b = 2, c = 3;
    
    // Constants
    const int MAX_SIZE = 100;
    const float TAX_RATE = 0.08f;
    
    return 0;
}
```

## 4. Operators

### Arithmetic Operators:
```c
#include <stdio.h>

int main() {
    int a = 10, b = 3;
    
    printf("Addition: %d + %d = %d\n", a, b, a + b);
    printf("Subtraction: %d - %d = %d\n", a, b, a - b);
    printf("Multiplication: %d * %d = %d\n", a, b, a * b);
    printf("Division: %d / %d = %d\n", a, b, a / b);
    printf("Modulus: %d %% %d = %d\n", a, b, a % b);
    
    // Increment and Decrement
    int x = 5;
    printf("x = %d\n", x);
    printf("++x = %d\n", ++x);  // Pre-increment
    printf("x++ = %d\n", x++);  // Post-increment
    printf("x = %d\n", x);
    
    return 0;
}
```

### Relational and Logical Operators:
```c
#include <stdio.h>

int main() {
    int a = 10, b = 20;
    
    // Relational operators
    printf("a == b: %d\n", a == b);  // Equal to
    printf("a != b: %d\n", a != b);  // Not equal to
    printf("a < b: %d\n", a < b);    // Less than
    printf("a > b: %d\n", a > b);    // Greater than
    printf("a <= b: %d\n", a <= b);  // Less than or equal
    printf("a >= b: %d\n", a >= b);  // Greater than or equal
    
    // Logical operators
    int x = 1, y = 0;
    printf("x && y: %d\n", x && y);  // Logical AND
    printf("x || y: %d\n", x || y);  // Logical OR
    printf("!x: %d\n", !x);          // Logical NOT
    
    return 0;
}
```

### Bitwise Operators:
```c
#include <stdio.h>

int main() {
    int a = 5;  // 101 in binary
    int b = 3;  // 011 in binary
    
    printf("a & b = %d\n", a & b);   // Bitwise AND: 001 = 1
    printf("a | b = %d\n", a | b);   // Bitwise OR:  101 = 5
    printf("a ^ b = %d\n", a ^ b);   // Bitwise XOR: 110 = 6
    printf("~a = %d\n", ~a);         // Bitwise NOT
    printf("a << 1 = %d\n", a << 1); // Left shift:  1010 = 10
    printf("a >> 1 = %d\n", a >> 1); // Right shift: 10 = 2
    
    return 0;
}
```

## 5. Control Flow Statements

### Conditional Statements:
```c
#include <stdio.h>

int main() {
    int num = 15;
    
    // if statement
    if (num > 0) {
        printf("%d is positive\n", num);
    }
    
    // if-else statement
    if (num % 2 == 0) {
        printf("%d is even\n", num);
    } else {
        printf("%d is odd\n", num);
    }
    
    // if-else if-else ladder
    int score = 85;
    if (score >= 90) {
        printf("Grade: A\n");
    } else if (score >= 80) {
        printf("Grade: B\n");
    } else if (score >= 70) {
        printf("Grade: C\n");
    } else if (score >= 60) {
        printf("Grade: D\n");
    } else {
        printf("Grade: F\n");
    }
    
    // Nested if
    int a = 10, b = 20;
    if (a > 0) {
        if (b > 0) {
            printf("Both numbers are positive\n");
        } else {
            printf("a is positive, b is not\n");
        }
    }
    
    return 0;
}
```

### Switch Statement:
```c
#include <stdio.h>

int main() {
    char operator;
    float num1, num2, result;
    
    printf("Enter operator (+, -, *, /): ");
    scanf("%c", &operator);
    
    printf("Enter two numbers: ");
    scanf("%f %f", &num1, &num2);
    
    switch (operator) {
        case '+':
            result = num1 + num2;
            printf("%.2f + %.2f = %.2f\n", num1, num2, result);
            break;
        case '-':
            result = num1 - num2;
            printf("%.2f - %.2f = %.2f\n", num1, num2, result);
            break;
        case '*':
            result = num1 * num2;
            printf("%.2f * %.2f = %.2f\n", num1, num2, result);
            break;
        case '/':
            if (num2 != 0) {
                result = num1 / num2;
                printf("%.2f / %.2f = %.2f\n", num1, num2, result);
            } else {
                printf("Error: Division by zero!\n");
            }
            break;
        default:
            printf("Invalid operator!\n");
            break;
    }
    
    return 0;
}
```

### Loops:
```c
#include <stdio.h>

int main() {
    // for loop
    printf("For loop:\n");
    for (int i = 1; i <= 5; i++) {
        printf("%d ", i);
    }
    printf("\n");
    
    // while loop
    printf("While loop:\n");
    int j = 1;
    while (j <= 5) {
        printf("%d ", j);
        j++;
    }
    printf("\n");
    
    // do-while loop
    printf("Do-while loop:\n");
    int k = 1;
    do {
        printf("%d ", k);
        k++;
    } while (k <= 5);
    printf("\n");
    
    // Nested loops - multiplication table
    printf("Multiplication table:\n");
    for (int i = 1; i <= 5; i++) {
        for (int j = 1; j <= 5; j++) {
            printf("%2d ", i * j);
        }
        printf("\n");
    }
    
    // break and continue
    printf("Break and continue example:\n");
    for (int i = 1; i <= 10; i++) {
        if (i == 5) {
            continue;  // Skip 5
        }
        if (i == 8) {
            break;     // Stop at 8
        }
        printf("%d ", i);
    }
    printf("\n");
    
    return 0;
}
```

## 6. Functions

### Function Basics:
```c
#include <stdio.h>

// Function declaration (prototype)
int add(int a, int b);
void greet(char name[]);
int factorial(int n);
void swap(int *a, int *b);

int main() {
    // Function calls
    int sum = add(5, 3);
    printf("Sum: %d\n", sum);
    
    char name[] = "Alice";
    greet(name);
    
    int fact = factorial(5);
    printf("Factorial of 5: %d\n", fact);
    
    int x = 10, y = 20;
    printf("Before swap: x = %d, y = %d\n", x, y);
    swap(&x, &y);
    printf("After swap: x = %d, y = %d\n", x, y);
    
    return 0;
}

// Function definitions
int add(int a, int b) {
    return a + b;
}

void greet(char name[]) {
    printf("Hello, %s!\n", name);
}

int factorial(int n) {
    if (n <= 1) {
        return 1;
    }
    return n * factorial(n - 1);  // Recursive function
}

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}
```

### Function Parameters:
```c
#include <stdio.h>

// Pass by value
void passByValue(int x) {
    x = 100;  // Changes local copy only
    printf("Inside function: %d\n", x);
}

// Pass by reference (using pointers)
void passByReference(int *x) {
    *x = 100;  // Changes original value
    printf("Inside function: %d\n", *x);
}

// Array as parameter
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

// Variable arguments
#include <stdarg.h>
int sum(int count, ...) {
    va_list args;
    va_start(args, count);
    
    int total = 0;
    for (int i = 0; i < count; i++) {
        total += va_arg(args, int);
    }
    
    va_end(args);
    return total;
}

int main() {
    int num = 50;
    
    printf("Original value: %d\n", num);
    passByValue(num);
    printf("After pass by value: %d\n", num);
    
    passByReference(&num);
    printf("After pass by reference: %d\n", num);
    
    int arr[] = {1, 2, 3, 4, 5};
    printArray(arr, 5);
    
    int total = sum(4, 10, 20, 30, 40);
    printf("Sum: %d\n", total);
    
    return 0;
}
```

## 7. Arrays

### One-Dimensional Arrays:
```c
#include <stdio.h>

int main() {
    // Array declaration and initialization
    int numbers[5] = {1, 2, 3, 4, 5};
    int grades[] = {85, 92, 78, 96, 87};  // Size inferred
    int scores[10] = {0};  // Initialize all elements to 0
    
    // Accessing array elements
    printf("First element: %d\n", numbers[0]);
    printf("Last element: %d\n", numbers[4]);
    
    // Modifying array elements
    numbers[2] = 100;
    
    // Printing array elements
    printf("Array elements: ");
    for (int i = 0; i < 5; i++) {
        printf("%d ", numbers[i]);
    }
    printf("\n");
    
    // Finding maximum and minimum
    int max = grades[0], min = grades[0];
    for (int i = 1; i < 5; i++) {
        if (grades[i] > max) max = grades[i];
        if (grades[i] < min) min = grades[i];
    }
    printf("Max: %d, Min: %d\n", max, min);
    
    // Array size
    int size = sizeof(numbers) / sizeof(numbers[0]);
    printf("Array size: %d\n", size);
    
    return 0;
}
```

### Multi-Dimensional Arrays:
```c
#include <stdio.h>

int main() {
    // 2D array declaration and initialization
    int matrix[3][3] = {
        {1, 2, 3},
        {4, 5, 6},
        {7, 8, 9}
    };
    
    // Alternative initialization
    int grid[2][4] = {{1, 2, 3, 4}, {5, 6, 7, 8}};
    
    // Accessing 2D array elements
    printf("Element at [1][2]: %d\n", matrix[1][2]);
    
    // Printing 2D array
    printf("Matrix:\n");
    for (int i = 0; i < 3; i++) {
        for (int j = 0; j < 3; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }
    
    // Matrix operations
    int matrixA[2][2] = {{1, 2}, {3, 4}};
    int matrixB[2][2] = {{5, 6}, {7, 8}};
    int result[2][2];
    
    // Matrix addition
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            result[i][j] = matrixA[i][j] + matrixB[i][j];
        }
    }
    
    printf("Matrix addition result:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%d ", result[i][j]);
        }
        printf("\n");
    }
    
    return 0;
}
```

## 8. Pointers

### Pointer Basics:
```c
#include <stdio.h>

int main() {
    int num = 42;
    int *ptr;  // Pointer declaration
    
    ptr = &num;  // Assign address of num to ptr
    
    printf("Value of num: %d\n", num);
    printf("Address of num: %p\n", (void*)&num);
    printf("Value of ptr: %p\n", (void*)ptr);
    printf("Value pointed by ptr: %d\n", *ptr);
    
    // Modify value through pointer
    *ptr = 100;
    printf("New value of num: %d\n", num);
    
    // Pointer arithmetic
    int arr[] = {10, 20, 30, 40, 50};
    int *p = arr;  // Points to first element
    
    printf("Array elements using pointer:\n");
    for (int i = 0; i < 5; i++) {
        printf("%d ", *(p + i));  // or p[i]
    }
    printf("\n");
    
    return 0;
}
```

### Pointers and Functions:
```c
#include <stdio.h>

// Function that takes pointer as parameter
void increment(int *x) {
    (*x)++;
}

// Function that returns pointer
int* getMax(int *a, int *b) {
    return (*a > *b) ? a : b;
}

// Function with array parameter (array is passed as pointer)
void modifyArray(int arr[], int size) {
    for (int i = 0; i < size; i++) {
        arr[i] *= 2;
    }
}

int main() {
    int num = 5;
    printf("Before increment: %d\n", num);
    increment(&num);
    printf("After increment: %d\n", num);
    
    int x = 10, y = 20;
    int *maxPtr = getMax(&x, &y);
    printf("Maximum value: %d\n", *maxPtr);
    
    int numbers[] = {1, 2, 3, 4, 5};
    printf("Original array: ");
    for (int i = 0; i < 5; i++) {
        printf("%d ", numbers[i]);
    }
    printf("\n");
    
    modifyArray(numbers, 5);
    printf("Modified array: ");
    for (int i = 0; i < 5; i++) {
        printf("%d ", numbers[i]);
    }
    printf("\n");
    
    return 0;
}
```

### Pointer to Pointer:
```c
#include <stdio.h>

int main() {
    int num = 42;
    int *ptr = &num;
    int **ptr2 = &ptr;  // Pointer to pointer
    
    printf("Value of num: %d\n", num);
    printf("Value using ptr: %d\n", *ptr);
    printf("Value using ptr2: %d\n", **ptr2);
    
    printf("Address of num: %p\n", (void*)&num);
    printf("Address stored in ptr: %p\n", (void*)ptr);
    printf("Address of ptr: %p\n", (void*)&ptr);
    printf("Address stored in ptr2: %p\n", (void*)ptr2);
    
    return 0;
}
```

## 9. Strings

### String Basics:
```c
#include <stdio.h>
#include <string.h>

int main() {
    // String declaration and initialization
    char str1[20] = "Hello";
    char str2[] = "World";
    char str3[20];
    
    // String input/output
    printf("Enter a string: ");
    fgets(str3, sizeof(str3), stdin);
    str3[strcspn(str3, "\n")] = '\0';  // Remove newline
    
    printf("str1: %s\n", str1);
    printf("str2: %s\n", str2);
    printf("str3: %s\n", str3);
    
    // String length
    printf("Length of str1: %zu\n", strlen(str1));
    
    // String copy
    char copy[20];
    strcpy(copy, str1);
    printf("Copy: %s\n", copy);
    
    // String concatenation
    char result[50];
    strcpy(result, str1);
    strcat(result, " ");
    strcat(result, str2);
    printf("Concatenated: %s\n", result);
    
    // String comparison
    if (strcmp(str1, str2) == 0) {
        printf("Strings are equal\n");
    } else {
        printf("Strings are different\n");
    }
    
    return 0;
}
```

### String Functions:
```c
#include <stdio.h>
#include <string.h>
#include <ctype.h>

int main() {
    char text[] = "Hello World Programming";
    char *token;
    
    // String tokenization
    printf("Tokenization:\n");
    char temp[100];
    strcpy(temp, text);  // strtok modifies string
    token = strtok(temp, " ");
    while (token != NULL) {
        printf("%s\n", token);
        token = strtok(NULL, " ");
    }
    
    // Character functions
    printf("\nCharacter analysis of '%s':\n", text);
    for (int i = 0; text[i] != '\0'; i++) {
        char ch = text[i];
        printf("'%c': ", ch);
        if (isalpha(ch)) printf("letter ");
        if (isdigit(ch)) printf("digit ");
        if (isspace(ch)) printf("space ");
        if (isupper(ch)) printf("uppercase ");
        if (islower(ch)) printf("lowercase ");
        printf("\n");
    }
    
    // Case conversion
    char lower[100], upper[100];
    strcpy(lower, text);
    strcpy(upper, text);
    
    for (int i = 0; lower[i]; i++) {
        lower[i] = tolower(lower[i]);
        upper[i] = toupper(upper[i]);
    }
    
    printf("\nOriginal: %s\n", text);
    printf("Lowercase: %s\n", lower);
    printf("Uppercase: %s\n", upper);
    
    return 0;
}
```

## 10. Structures and Unions

### Structures:
```c
#include <stdio.h>
#include <string.h>

// Structure definition
struct Student {
    int id;
    char name[50];
    float gpa;
    char major[30];
};

// Structure with nested structure
struct Address {
    char street[100];
    char city[50];
    char state[20];
    int zipCode;
};

struct Person {
    char name[50];
    int age;
    struct Address address;
};

// Function with structure parameter
void printStudent(struct Student s) {
    printf("ID: %d\n", s.id);
    printf("Name: %s\n", s.name);
    printf("GPA: %.2f\n", s.gpa);
    printf("Major: %s\n", s.major);
}

// Function with structure pointer
void updateGPA(struct Student *s, float newGPA) {
    s->gpa = newGPA;  // Same as (*s).gpa = newGPA;
}

int main() {
    // Structure initialization
    struct Student student1 = {101, "Alice Johnson", 3.75, "Computer Science"};
    
    // Another way to initialize
    struct Student student2;
    student2.id = 102;
    strcpy(student2.name, "Bob Smith");
    student2.gpa = 3.25;
    strcpy(student2.major, "Mathematics");
    
    // Accessing structure members
    printf("Student 1:\n");
    printStudent(student1);
    
    printf("\nStudent 2:\n");
    printStudent(student2);
    
    // Modifying structure through pointer
    updateGPA(&student1, 3.90);
    printf("\nUpdated Student 1 GPA: %.2f\n", student1.gpa);
    
    // Array of structures
    struct Student class[3] = {
        {201, "Charlie Brown", 3.80, "Physics"},
        {202, "Diana Prince", 3.95, "Chemistry"},
        {203, "Edward Norton", 3.60, "Biology"}
    };
    
    printf("\nClass roster:\n");
    for (int i = 0; i < 3; i++) {
        printf("%d. %s (%.2f)\n", class[i].id, class[i].name, class[i].gpa);
    }
    
    // Nested structures
    struct Person person1;
    strcpy(person1.name, "John Doe");
    person1.age = 30;
    strcpy(person1.address.street, "123 Main St");
    strcpy(person1.address.city, "New York");
    strcpy(person1.address.state, "NY");
    person1.address.zipCode = 10001;
    
    printf("\nPerson info:\n");
    printf("Name: %s\n", person1.name);
    printf("Age: %d\n", person1.age);
    printf("Address: %s, %s, %s %d\n", 
           person1.address.street, person1.address.city, 
           person1.address.state, person1.address.zipCode);
    
    return 0;
}
```

### Unions:
```c
#include <stdio.h>

// Union definition
union Data {
    int intValue;
    float floatValue;
    char charValue;
};

int main() {
    union Data data;
    
    // Union members share the same memory location
    printf("Size of union: %zu bytes\n", sizeof(data));
    
    data.intValue = 42;
    printf("Integer value: %d\n", data.intValue);
    
    data.floatValue = 3.14f;
    printf("Float value: %.2f\n", data.floatValue);
    printf("Integer value (corrupted): %d\n", data.intValue);
    
    data.charValue = 'A';
    printf("Character value: %c\n", data.charValue);
    printf("Integer value (corrupted): %d\n", data.intValue);
    
    return 0;
}
```

## 11. File I/O

### File Operations:
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *file;
    char text[100];
    
    // Writing to a file
    file = fopen("example.txt", "w");
    if (file == NULL) {
        printf("Error opening file for writing!\n");
        return 1;
    }
    
    fprintf(file, "Hello, File I/O!\n");
    fprintf(file, "Line 2: Numbers %d and %.2f\n", 42, 3.14);
    fputs("Line 3: Using fputs\n", file);
    fclose(file);
    
    // Reading from a file
    file = fopen("example.txt", "r");
    if (file == NULL) {
        printf("Error opening file for reading!\n");
        return 1;
    }
    
    printf("File contents:\n");
    while (fgets(text, sizeof(text), file) != NULL) {
        printf("%s", text);
    }
    fclose(file);
    
    // Appending to a file
    file = fopen("example.txt", "a");
    if (file != NULL) {
        fprintf(file, "Appended line\n");
        fclose(file);
    }
    
    // Binary file operations
    int numbers[] = {1, 2, 3, 4, 5};
    
    // Write binary data
    file = fopen("numbers.bin", "wb");
    if (file != NULL) {
        fwrite(numbers, sizeof(int), 5, file);
        fclose(file);
    }
    
    // Read binary data
    int readNumbers[5];
    file = fopen("numbers.bin", "rb");
    if (file != NULL) {
        fread(readNumbers, sizeof(int), 5, file);
        fclose(file);
        
        printf("Numbers from binary file: ");
        for (int i = 0; i < 5; i++) {
            printf("%d ", readNumbers[i]);
        }
        printf("\n");
    }
    
    return 0;
}
```

### File Processing Example:
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    FILE *input, *output;
    char line[256];
    int lineNumber = 1;
    
    // Open input file
    input = fopen("input.txt", "r");
    if (input == NULL) {
        printf("Error: Cannot open input.txt\n");
        return 1;
    }
    
    // Open output file
    output = fopen("numbered_output.txt", "w");
    if (output == NULL) {
        printf("Error: Cannot create output file\n");
        fclose(input);
        return 1;
    }
    
    // Process file line by line
    while (fgets(line, sizeof(line), input) != NULL) {
        fprintf(output, "%3d: %s", lineNumber++, line);
    }
    
    fclose(input);
    fclose(output);
    
    printf("File processing completed!\n");
    return 0;
}
```

## 12. Dynamic Memory Allocation

### malloc, calloc, realloc, free:
```c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main() {
    int n;
    
    printf("Enter number of integers: ");
    scanf("%d", &n);
    
    // malloc - allocates uninitialized memory
    int *arr1 = (int*)malloc(n * sizeof(int));
    if (arr1 == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }
    
    // Initialize and print
    for (int i = 0; i < n; i++) {
        arr1[i] = i + 1;
        printf("%d ", arr1[i]);
    }
    printf("\n");
    
    // calloc - allocates zero-initialized memory
    int *arr2 = (int*)calloc(n, sizeof(int));
    if (arr2 == NULL) {
        printf("Memory allocation failed!\n");
        free(arr1);
        return 1;
    }
    
    printf("Calloc initialized array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr2[i]);
    }
    printf("\n");
    
    // realloc - resize memory block
    n *= 2;  // Double the size
    arr1 = (int*)realloc(arr1, n * sizeof(int));
    if (arr1 == NULL) {
        printf("Memory reallocation failed!\n");
        free(arr2);
        return 1;
    }
    
    // Initialize new elements
    for (int i = n/2; i < n; i++) {
        arr1[i] = i + 1;
    }
    
    printf("Reallocated array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr1[i]);
    }
    printf("\n");
    
    // Dynamic string allocation
    char *str = (char*)malloc(50 * sizeof(char));
    if (str != NULL) {
        strcpy(str, "Dynamic string allocation");
        printf("Dynamic string: %s\n", str);
        free(str);
    }
    
    // Free allocated memory
    free(arr1);
    free(arr2);
    
    return 0;
}
```

### Dynamic 2D Array:
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int rows, cols;
    
    printf("Enter rows and columns: ");
    scanf("%d %d", &rows, &cols);
    
    // Allocate memory for array of pointers
    int **matrix = (int**)malloc(rows * sizeof(int*));
    
    // Allocate memory for each row
    for (int i = 0; i < rows; i++) {
        matrix[i] = (int*)malloc(cols * sizeof(int));
    }
    
    // Initialize matrix
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            matrix[i][j] = i * cols + j + 1;
        }
    }
    
    // Print matrix
    printf("Dynamic 2D array:\n");
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            printf("%3d ", matrix[i][j]);
        }
        printf("\n");
    }
    
    // Free memory
    for (int i = 0; i < rows; i++) {
        free(matrix[i]);
    }
    free(matrix);
    
    return 0;
}
```

## 13. Preprocessor Directives

### Macros and Conditional Compilation:
```c
#include <stdio.h>

// Macro definitions
#define PI 3.14159
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define SQUARE(x) ((x) * (x))
#define DEBUG 1

// Conditional compilation
#ifdef DEBUG
    #define PRINT_DEBUG(msg) printf("DEBUG: %s\n", msg)
#else
    #define PRINT_DEBUG(msg)
#endif

// Multi-line macro
#define SWAP(a, b) do { \
    int temp = a; \
    a = b; \
    b = temp; \
} while(0)

int main() {
    // Using macros
    printf("Value of PI: %.5f\n", PI);
    
    int x = 10, y = 20;
    printf("Max of %d and %d: %d\n", x, y, MAX(x, y));
    printf("Square of %d: %d\n", x, SQUARE(x));
    
    // Debug macro
    PRINT_DEBUG("This is a debug message");
    
    // Predefined macros
    printf("File: %s\n", __FILE__);
    printf("Line: %d\n", __LINE__);
    printf("Date: %s\n", __DATE__);
    printf("Time: %s\n", __TIME__);
    
    // Swap using macro
    printf("Before swap: x = %d, y = %d\n", x, y);
    SWAP(x, y);
    printf("After swap: x = %d, y = %d\n", x, y);
    
    return 0;
}
```

## 14. Advanced Topics

### Function Pointers:
```c
#include <stdio.h>

// Functions to be pointed to
int add(int a, int b) { return a + b; }
int subtract(int a, int b) { return a - b; }
int multiply(int a, int b) { return a * b; }

// Function that takes function pointer as parameter
int calculate(int x, int y, int (*operation)(int, int)) {
    return operation(x, y);
}

int main() {
    // Function pointer declaration
    int (*func_ptr)(int, int);
    
    // Assign function to pointer
    func_ptr = add;
    printf("Addition: %d\n", func_ptr(10, 5));
    
    func_ptr = subtract;
    printf("Subtraction: %d\n", func_ptr(10, 5));
    
    // Array of function pointers
    int (*operations[])(int, int) = {add, subtract, multiply};
    char *op_names[] = {"Addition", "Subtraction", "Multiplication"};
    
    for (int i = 0; i < 3; i++) {
        printf("%s: %d\n", op_names[i], operations[i](15, 3));
    }
    
    // Using function pointer as parameter
    printf("Calculate with add: %d\n", calculate(8, 4, add));
    printf("Calculate with multiply: %d\n", calculate(8, 4, multiply));
    
    return 0;
}
```

### Bit Manipulation:
```c
#include <stdio.h>

void printBinary(int n) {
    for (int i = 31; i >= 0; i--) {
        printf("%d", (n >> i) & 1);
        if (i % 4 == 0) printf(" ");
    }
    printf("\n");
}

int main() {
    int num = 29;  // 11101 in binary
    
    printf("Number: %d\n", num);
    printf("Binary: ");
    printBinary(num);
    
    // Set a bit
    int pos = 1;
    int setBit = num | (1 << pos);
    printf("Set bit %d: %d\n", pos, setBit);
    printBinary(setBit);
    
    // Clear a bit
    int clearBit = num & ~(1 << pos);
    printf("Clear bit %d: %d\n", pos, clearBit);
    printBinary(clearBit);
    
    // Toggle a bit
    int toggleBit = num ^ (1 << pos);
    printf("Toggle bit %d: %d\n", pos, toggleBit);
    printBinary(toggleBit);
    
    // Check if bit is set
    int isSet = (num >> pos) & 1;
    printf("Bit %d is %s\n", pos, isSet ? "set" : "not set");
    
    return 0;
}
```

## Common Patterns and Best Practices

### Error Handling:
```c
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>

int main() {
    FILE *file = fopen("nonexistent.txt", "r");
    
    if (file == NULL) {
        fprintf(stderr, "Error opening file: %s\n", strerror(errno));
        return EXIT_FAILURE;
    }
    
    // File operations...
    fclose(file);
    return EXIT_SUCCESS;
}
```

### Memory Management Best Practices:
```c
#include <stdio.h>
#include <stdlib.h>

int main() {
    int *ptr = malloc(10 * sizeof(int));
    
    // Always check if malloc succeeded
    if (ptr == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return EXIT_FAILURE;
    }
    
    // Use the memory...
    
    // Always free allocated memory
    free(ptr);
    ptr = NULL;  // Avoid dangling pointer
    
    return EXIT_SUCCESS;
}
```

## Interview Questions

1. What is the difference between malloc() and calloc()?
2. Explain pointer arithmetic
3. What is the difference between pass by value and pass by reference?
4. How do you implement dynamic arrays in C?
5. What are function pointers and how are they used?
6. Explain the difference between structure and union
7. What is memory leak and how to prevent it?
8. How does the preprocessor work in C?
9. What are the different storage classes in C?
10. Explain bit manipulation operations

## Practice Projects

1. **Calculator**: Implement a calculator with all basic operations
2. **Student Management System**: CRUD operations with file storage
3. **Library Management**: Book tracking with dynamic memory
4. **Text Editor**: Basic text manipulation with file I/O
5. **Data Structures**: Implement linked lists, stacks, queues
6. **Mini Database**: Simple record management system

---

*This comprehensive C programming guide covers fundamental to advanced concepts. Practice coding regularly and build projects to strengthen your understanding of system-level programming.*
