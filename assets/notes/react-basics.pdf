# React Fundamentals - Complete Study Guide

## Table of Contents
1. Introduction to React
2. JSX and Components
3. Props and State
4. Event Handling
5. Component Lifecycle
6. React Hooks
7. Conditional Rendering
8. Lists and Keys
9. Forms and Controlled Components
10. React Router
11. State Management
12. Performance Optimization
13. Testing React Applications
14. Best Practices

## 1. Introduction to React

React is a JavaScript library for building user interfaces, particularly single-page applications where you need a fast, interactive user experience.

### Key Concepts:
- **Component-Based**: Build encapsulated components that manage their own state
- **Declarative**: React makes it painless to create interactive UIs
- **Virtual DOM**: Efficient updating and rendering of components
- **One-Way Data Flow**: Data flows down from parent to child components

### Setting Up React:
```bash
# Create React App
npx create-react-app my-app
cd my-app
npm start

# Or with Vite (faster)
npm create vite@latest my-react-app -- --template react
cd my-react-app
npm install
npm run dev
```

## 2. JSX and Components

### JSX Syntax:
```jsx
// JSX allows you to write HTML-like syntax in JavaScript
const element = <h1>Hello, World!</h1>;

// JSX with expressions
const name = 'Alice';
const element = <h1>Hello, {name}!</h1>;

// JSX with attributes
const element = <img src="image.jpg" alt="Description" />;

// JSX with CSS classes
const element = <div className="container">Content</div>;
```

### Functional Components:
```jsx
// Basic functional component
function Welcome(props) {
  return <h1>Hello, {props.name}!</h1>;
}

// Arrow function component
const Welcome = (props) => {
  return <h1>Hello, {props.name}!</h1>;
};

// Component with destructured props
const Welcome = ({ name, age }) => {
  return (
    <div>
      <h1>Hello, {name}!</h1>
      <p>You are {age} years old.</p>
    </div>
  );
};
```

### Class Components (Legacy):
```jsx
import React, { Component } from 'react';

class Welcome extends Component {
  render() {
    return <h1>Hello, {this.props.name}!</h1>;
  }
}
```

## 3. Props and State

### Props (Properties):
```jsx
// Parent component
function App() {
  return (
    <div>
      <Welcome name="Alice" age={25} />
      <Welcome name="Bob" age={30} />
    </div>
  );
}

// Child component receiving props
function Welcome({ name, age }) {
  return (
    <div>
      <h2>Welcome, {name}!</h2>
      <p>Age: {age}</p>
    </div>
  );
}

// Props validation with PropTypes
import PropTypes from 'prop-types';

Welcome.propTypes = {
  name: PropTypes.string.isRequired,
  age: PropTypes.number.isRequired
};

Welcome.defaultProps = {
  age: 0
};
```

### State with useState Hook:
```jsx
import React, { useState } from 'react';

function Counter() {
  const [count, setCount] = useState(0);
  const [name, setName] = useState('');

  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);

  return (
    <div>
      <h2>Count: {count}</h2>
      <button onClick={increment}>+</button>
      <button onClick={decrement}>-</button>
      
      <input 
        type="text"
        value={name}
        onChange={(e) => setName(e.target.value)}
        placeholder="Enter your name"
      />
      <p>Hello, {name}!</p>
    </div>
  );
}
```

## 4. Event Handling

```jsx
function EventHandling() {
  const [message, setMessage] = useState('');

  // Event handler functions
  const handleClick = () => {
    setMessage('Button clicked!');
  };

  const handleInputChange = (event) => {
    setMessage(event.target.value);
  };

  const handleSubmit = (event) => {
    event.preventDefault();
    console.log('Form submitted:', message);
  };

  const handleKeyPress = (event) => {
    if (event.key === 'Enter') {
      console.log('Enter pressed');
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <input
        type="text"
        onChange={handleInputChange}
        onKeyPress={handleKeyPress}
        value={message}
      />
      <button type="submit">Submit</button>
      <button type="button" onClick={handleClick}>
        Click Me
      </button>
      <p>{message}</p>
    </form>
  );
}
```

## 5. Component Lifecycle

### useEffect Hook (Replaces lifecycle methods):
```jsx
import React, { useState, useEffect } from 'react';

function UserProfile({ userId }) {
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(true);

  // Component did mount / update
  useEffect(() => {
    const fetchUser = async () => {
      setLoading(true);
      try {
        const response = await fetch(`/api/users/${userId}`);
        const userData = await response.json();
        setUser(userData);
      } catch (error) {
        console.error('Error fetching user:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchUser();
  }, [userId]); // Dependency array

  // Component will unmount
  useEffect(() => {
    const timer = setInterval(() => {
      console.log('Timer tick');
    }, 1000);

    // Cleanup function
    return () => {
      clearInterval(timer);
    };
  }, []);

  if (loading) return <div>Loading...</div>;
  if (!user) return <div>User not found</div>;

  return (
    <div>
      <h2>{user.name}</h2>
      <p>{user.email}</p>
    </div>
  );
}
```

## 6. React Hooks

### Common Hooks:

```jsx
import React, { useState, useEffect, useContext, useReducer } from 'react';

// useState
function UseStateExample() {
  const [count, setCount] = useState(0);
  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}

// useEffect
function UseEffectExample() {
  const [data, setData] = useState(null);

  useEffect(() => {
    // Effect logic
    fetchData().then(setData);
  }, []); // Dependencies

  return <div>{data ? data.title : 'Loading...'}</div>;
}

// useContext
const ThemeContext = React.createContext();

function UseContextExample() {
  const theme = useContext(ThemeContext);
  return <div className={theme}>Themed content</div>;
}

// useReducer
function useReducerExample() {
  const initialState = { count: 0 };
  
  function reducer(state, action) {
    switch (action.type) {
      case 'increment':
        return { count: state.count + 1 };
      case 'decrement':
        return { count: state.count - 1 };
      default:
        throw new Error();
    }
  }

  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      Count: {state.count}
      <button onClick={() => dispatch({ type: 'increment' })}>+</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>
    </div>
  );
}

// Custom Hook
function useLocalStorage(key, initialValue) {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const item = window.localStorage.getItem(key);
      return item ? JSON.parse(item) : initialValue;
    } catch (error) {
      return initialValue;
    }
  });

  const setValue = (value) => {
    try {
      setStoredValue(value);
      window.localStorage.setItem(key, JSON.stringify(value));
    } catch (error) {
      console.error(error);
    }
  };

  return [storedValue, setValue];
}
```

## 7. Conditional Rendering

```jsx
function ConditionalRendering({ user, isLoggedIn, items }) {
  // If statement
  if (!isLoggedIn) {
    return <div>Please log in</div>;
  }

  return (
    <div>
      {/* Logical AND operator */}
      {user && <h1>Welcome, {user.name}!</h1>}
      
      {/* Ternary operator */}
      {items.length > 0 ? (
        <ul>
          {items.map(item => <li key={item.id}>{item.name}</li>)}
        </ul>
      ) : (
        <p>No items found</p>
      )}
      
      {/* Multiple conditions */}
      {user.role === 'admin' && user.isActive && (
        <button>Admin Panel</button>
      )}
    </div>
  );
}
```

## 8. Lists and Keys

```jsx
function TodoList({ todos }) {
  return (
    <ul>
      {todos.map(todo => (
        <TodoItem
          key={todo.id}  // Important: unique key for each item
          todo={todo}
          onToggle={() => handleToggle(todo.id)}
          onDelete={() => handleDelete(todo.id)}
        />
      ))}
    </ul>
  );
}

function TodoItem({ todo, onToggle, onDelete }) {
  return (
    <li>
      <input
        type="checkbox"
        checked={todo.completed}
        onChange={onToggle}
      />
      <span
        style={{
          textDecoration: todo.completed ? 'line-through' : 'none'
        }}
      >
        {todo.text}
      </span>
      <button onClick={onDelete}>Delete</button>
    </li>
  );
}
```

## 9. Forms and Controlled Components

```jsx
function ContactForm() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    message: '',
    category: 'general'
  });

  const [errors, setErrors] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));

    // Clear error when user starts typing
    if (errors[name]) {
      setErrors(prev => ({
        ...prev,
        [name]: ''
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.name.trim()) {
      newErrors.name = 'Name is required';
    }

    if (!formData.email.trim()) {
      newErrors.email = 'Email is required';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      newErrors.email = 'Email is invalid';
    }

    if (!formData.message.trim()) {
      newErrors.message = 'Message is required';
    }

    return newErrors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    
    const newErrors = validateForm();
    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors);
      return;
    }

    // Submit form
    console.log('Submitting:', formData);
    // Reset form
    setFormData({ name: '', email: '', message: '', category: 'general' });
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <span className="error">{errors.name}</span>}
      </div>

      <div>
        <label htmlFor="email">Email:</label>
        <input
          type="email"
          id="email"
          name="email"
          value={formData.email}
          onChange={handleChange}
        />
        {errors.email && <span className="error">{errors.email}</span>}
      </div>

      <div>
        <label htmlFor="category">Category:</label>
        <select
          id="category"
          name="category"
          value={formData.category}
          onChange={handleChange}
        >
          <option value="general">General</option>
          <option value="support">Support</option>
          <option value="feedback">Feedback</option>
        </select>
      </div>

      <div>
        <label htmlFor="message">Message:</label>
        <textarea
          id="message"
          name="message"
          value={formData.message}
          onChange={handleChange}
          rows={4}
        />
        {errors.message && <span className="error">{errors.message}</span>}
      </div>

      <button type="submit">Send Message</button>
    </form>
  );
}
```

## 10. React Router

```jsx
import { BrowserRouter as Router, Routes, Route, Link, Navigate } from 'react-router-dom';

function App() {
  return (
    <Router>
      <nav>
        <Link to="/">Home</Link>
        <Link to="/about">About</Link>
        <Link to="/users">Users</Link>
      </nav>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/about" element={<About />} />
        <Route path="/users" element={<Users />} />
        <Route path="/users/:id" element={<UserDetail />} />
        <Route path="/redirect" element={<Navigate to="/" />} />
        <Route path="*" element={<NotFound />} />
      </Routes>
    </Router>
  );
}

// Component using URL parameters
import { useParams, useNavigate } from 'react-router-dom';

function UserDetail() {
  const { id } = useParams();
  const navigate = useNavigate();

  return (
    <div>
      <h2>User {id}</h2>
      <button onClick={() => navigate('/users')}>
        Back to Users
      </button>
    </div>
  );
}
```

## 11. State Management

### Context API for Global State:
```jsx
// Create Context
const AppContext = React.createContext();

// Provider Component
function AppProvider({ children }) {
  const [user, setUser] = useState(null);
  const [theme, setTheme] = useState('light');

  const login = (userData) => setUser(userData);
  const logout = () => setUser(null);
  const toggleTheme = () => setTheme(theme === 'light' ? 'dark' : 'light');

  const value = {
    user,
    theme,
    login,
    logout,
    toggleTheme
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}

// Custom hook to use context
function useApp() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within AppProvider');
  }
  return context;
}

// Using the context
function Header() {
  const { user, theme, logout, toggleTheme } = useApp();

  return (
    <header className={theme}>
      {user ? (
        <div>
          Welcome, {user.name}!
          <button onClick={logout}>Logout</button>
        </div>
      ) : (
        <div>Please log in</div>
      )}
      <button onClick={toggleTheme}>
        Switch to {theme === 'light' ? 'dark' : 'light'} mode
      </button>
    </header>
  );
}
```

## 12. Performance Optimization

```jsx
import React, { memo, useMemo, useCallback, lazy, Suspense } from 'react';

// React.memo for component memoization
const ExpensiveComponent = memo(({ data, onUpdate }) => {
  // Component will only re-render if props change
  return <div>{/* expensive rendering */}</div>;
});

// useMemo for expensive calculations
function DataProcessor({ items, filter }) {
  const processedData = useMemo(() => {
    return items
      .filter(item => item.category === filter)
      .map(item => ({
        ...item,
        processed: true,
        // expensive processing
      }));
  }, [items, filter]);

  return <div>{/* render processed data */}</div>;
}

// useCallback for function memoization
function ParentComponent() {
  const [count, setCount] = useState(0);
  const [items, setItems] = useState([]);

  const handleItemClick = useCallback((id) => {
    // Function is memoized and won't cause unnecessary re-renders
    console.log('Item clicked:', id);
  }, []); // Dependencies

  return (
    <div>
      <ChildComponent items={items} onItemClick={handleItemClick} />
    </div>
  );
}

// Lazy loading components
const LazyComponent = lazy(() => import('./LazyComponent'));

function App() {
  return (
    <div>
      <Suspense fallback={<div>Loading...</div>}>
        <LazyComponent />
      </Suspense>
    </div>
  );
}
```

## 13. Testing React Applications

```jsx
// Component to test
function Button({ onClick, children, disabled = false }) {
  return (
    <button onClick={onClick} disabled={disabled}>
      {children}
    </button>
  );
}

// Test file (Button.test.js)
import { render, screen, fireEvent } from '@testing-library/react';
import '@testing-library/jest-dom';
import Button from './Button';

describe('Button Component', () => {
  test('renders button with text', () => {
    render(<Button>Click me</Button>);
    const button = screen.getByRole('button', { name: /click me/i });
    expect(button).toBeInTheDocument();
  });

  test('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    const button = screen.getByRole('button');
    fireEvent.click(button);
    
    expect(handleClick).toHaveBeenCalledTimes(1);
  });

  test('is disabled when disabled prop is true', () => {
    render(<Button disabled>Click me</Button>);
    const button = screen.getByRole('button');
    expect(button).toBeDisabled();
  });
});

// Testing hooks
import { renderHook, act } from '@testing-library/react';
import { useCounter } from './useCounter';

test('should increment counter', () => {
  const { result } = renderHook(() => useCounter());

  act(() => {
    result.current.increment();
  });

  expect(result.current.count).toBe(1);
});
```

## 14. Best Practices

### Code Organization:
```
src/
├── components/
│   ├── common/
│   │   ├── Button/
│   │   │   ├── Button.jsx
│   │   │   ├── Button.test.js
│   │   │   └── index.js
│   │   └── Modal/
│   └── pages/
│       ├── Home/
│       └── About/
├── hooks/
│   ├── useAuth.js
│   └── useApi.js
├── context/
│   └── AppContext.js
├── utils/
│   └── helpers.js
└── App.js
```

### Component Best Practices:
```jsx
// 1. Keep components small and focused
// 2. Use functional components with hooks
// 3. Extract custom hooks for reusable logic
// 4. Use PropTypes or TypeScript for type checking
// 5. Handle loading and error states

function UserProfile({ userId }) {
  const { user, loading, error } = useUser(userId);

  if (loading) return <LoadingSpinner />;
  if (error) return <ErrorMessage error={error} />;
  if (!user) return <NotFound />;

  return (
    <div>
      <h1>{user.name}</h1>
      <p>{user.email}</p>
    </div>
  );
}

UserProfile.propTypes = {
  userId: PropTypes.string.isRequired
};
```

### Performance Tips:
1. Use React.memo for components that render often with same props
2. Implement useMemo for expensive calculations
3. Use useCallback for event handlers passed to child components
4. Lazy load components that aren't immediately needed
5. Optimize bundle size with code splitting
6. Use React DevTools Profiler to identify performance issues

### Common Pitfalls to Avoid:
1. Modifying state directly (always use setState)
2. Using array indices as keys in lists
3. Forgetting to clean up side effects in useEffect
4. Creating objects/functions in render (causes unnecessary re-renders)
5. Not handling edge cases (loading, error, empty states)

## Interview Questions

1. What is React and why use it?
2. Explain the Virtual DOM concept
3. What's the difference between props and state?
4. How do React hooks work?
5. What is the purpose of keys in React lists?
6. Explain the component lifecycle methods
7. How do you handle forms in React?
8. What are higher-order components (HOCs)?
9. How do you optimize React application performance?
10. What is Context API and when to use it?

## Practice Projects

1. **Todo App**: CRUD operations with local storage
2. **Weather App**: API integration with error handling
3. **E-commerce Cart**: State management with Context API
4. **Blog Platform**: React Router with nested routes
5. **Real-time Chat**: WebSocket integration
6. **Dashboard**: Data visualization with charts

---

*This comprehensive React guide covers all essential concepts for building modern web applications. Practice building projects to reinforce your understanding and prepare for technical interviews.*
